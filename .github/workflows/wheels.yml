name: Python wheel package build and publish

on:
  release:
    types: [created]

  # Enable Run Workflow button in GitHub UI
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build SDist
        run: pipx run build --sdist

      - name: Check metadata
        run: pipx run twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.platform_id }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Loosely based on scikit-learn's config:
        # https://github.com/scikit-learn/scikit-learn/blob/main/.github/workflows/wheels.yml
        include:
          - os: windows-latest
            python-version: "3.8"
            platform_id: win_amd64

          # Linux 64 bit manylinux2014
          - os: ubuntu-latest
            python-version: "3.8"
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

            # Use x86 macOS runner to build both x86 and ARM. GitHub does not offer M1/M2 yet (only self-hosted).
          - os: macos-latest
            python-version: "3.8"
            platform_id: macosx_x86_64

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tools (macOS)
        if: contains(matrix.os, 'macos')
        # Install coreutils which includes `nproc` used by `make -j` in suitesparse.sh
        #
        # GitHub actions comes with libomp already installed, but for its native arch only. Must build universal one
        # manually so that both x86 and arm builds can be built.
        run: |
          brew install coreutils
          brew install libomp
          sh add_arm_to_libomp_dylib.sh

      - name: Build Wheels
        env:
          # very verbose
          CIBW_BUILD_VERBOSITY: 3

          # Build SuiteSparse
          CIBW_BEFORE_ALL: bash suitesparse.sh ${{ github.ref }}

          # CMAKE_GNUtoMS=ON asks suitesparse.sh to build libraries in MSVC style on Windows.
          CIBW_ENVIRONMENT_WINDOWS: CMAKE_GNUtoMS=ON GRAPHBLAS_PREFIX="C:/GraphBLAS"

          # macOS libomp requires special configs. BREW_LIBOMP=1 asks suitesparse.sh to include them.
          CIBW_ENVIRONMENT_MACOS: BREW_LIBOMP="1"

          # Uncomment to only build CPython wheels
#          CIBW_BUILD: "cp*"

          # macOS: build x86_64 and arm64
          #CIBW_ARCHS_MACOS: "x86_64 arm64"

          # No 32-bit builds
          CIBW_SKIP: "*-win32 *_i686 *musl*"

          # Use delvewheel on Windows.
          # This copies graphblas.dll into the wheel. "repair" in cibuildwheel parlance includes copying any shared
          # libraries from the build host into the wheel to make the wheel self-contained.
          # Cibuildwheel includes tools for this for Linux and macOS, and they recommend delvewheel for Windows.
          # Note: Currently using a workaround: --no-mangle instead of stripping graphblas.dll
          # see https://github.com/adang1345/delvewheel/issues/33
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path \"C:\\GraphBLAS\\bin\" --no-mangle \"libgomp-1.dll;libgcc_s_seh-1.dll\" -w {dest_dir} {wheel}"

          # make cibuildwheel install test dependencies from pyproject.toml
          CIBW_TEST_EXTRAS: "test"

          # run tests
          CIBW_TEST_COMMAND: "pytest {project}/suitesparse_graphblas/tests"

          # GitHub Actions macOS Intel runner cannot run ARM tests.
          CIBW_TEST_SKIP: "*-macosx_arm64"

        run: |
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse .
        shell: bash

      - uses: actions/upload-artifact@v3
        id: uploadAttempt1
        continue-on-error: true
        with:
          path: wheelhouse/*.whl
          if-no-files-found: error

      # Retry upload if first attempt failed. This happens somewhat randomly and for irregular reasons.
      # Logic is a duplicate of previous step.
      - uses: actions/upload-artifact@v3
        id: uploadAttempt2
        if: steps.uploadAttempt1.outcome == 'failure'
        continue-on-error: false
        with:
          path: wheelhouse/*.whl
          if-no-files-found: error

  upload_all:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
#    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # PyPI does not allow replacing a file. Without this flag the entire action fails if even a single duplicate exists.
          skip_existing: true
          verbose: true
          # Real PyPI:
#          password: ${{ secrets.PYPI_TOKEN }}

          # Test PyPI:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
